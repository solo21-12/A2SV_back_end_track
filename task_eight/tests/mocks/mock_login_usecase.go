// Code generated by MockGen. DO NOT EDIT.
// Source: Domain/login.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/solo21-12/A2SV_back_end_track/tree/main/task_seven/Domain"
)

// MockLoginUseCase is a mock of LoginUseCase interface.
type MockLoginUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockLoginUseCaseMockRecorder
}

// MockLoginUseCaseMockRecorder is the mock recorder for MockLoginUseCase.
type MockLoginUseCaseMockRecorder struct {
	mock *MockLoginUseCase
}

// NewMockLoginUseCase creates a new mock instance.
func NewMockLoginUseCase(ctrl *gomock.Controller) *MockLoginUseCase {
	mock := &MockLoginUseCase{ctrl: ctrl}
	mock.recorder = &MockLoginUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginUseCase) EXPECT() *MockLoginUseCaseMockRecorder {
	return m.recorder
}

// CreateAccessToken mocks base method.
func (m *MockLoginUseCase) CreateAccessToken(user domain.UserDTO, secret []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessToken", user, secret)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessToken indicates an expected call of CreateAccessToken.
func (mr *MockLoginUseCaseMockRecorder) CreateAccessToken(user, secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessToken", reflect.TypeOf((*MockLoginUseCase)(nil).CreateAccessToken), user, secret)
}

// GetJwtSecret mocks base method.
func (m *MockLoginUseCase) GetJwtSecret() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJwtSecret")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJwtSecret indicates an expected call of GetJwtSecret.
func (mr *MockLoginUseCaseMockRecorder) GetJwtSecret() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJwtSecret", reflect.TypeOf((*MockLoginUseCase)(nil).GetJwtSecret))
}

// GetUserEmail mocks base method.
func (m *MockLoginUseCase) GetUserEmail(ctx context.Context, email string) (*domain.User, *domain.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserEmail", ctx, email)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(*domain.ErrorResponse)
	return ret0, ret1
}

// GetUserEmail indicates an expected call of GetUserEmail.
func (mr *MockLoginUseCaseMockRecorder) GetUserEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserEmail", reflect.TypeOf((*MockLoginUseCase)(nil).GetUserEmail), ctx, email)
}

// ValidatePassword mocks base method.
func (m *MockLoginUseCase) ValidatePassword(password, hashedPassword string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatePassword", password, hashedPassword)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ValidatePassword indicates an expected call of ValidatePassword.
func (mr *MockLoginUseCaseMockRecorder) ValidatePassword(password, hashedPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatePassword", reflect.TypeOf((*MockLoginUseCase)(nil).ValidatePassword), password, hashedPassword)
}
