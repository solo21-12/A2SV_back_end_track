// Code generated by MockGen. DO NOT EDIT.
// Source: Domain/user.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	Domain "github.com/solo21-12/A2SV_back_end_track/tree/main/task_seven/Domain"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepository) CreateUser(ctx context.Context, user Domain.UserCreateRequest) (Domain.UserDTO, *Domain.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(Domain.UserDTO)
	ret1, _ := ret[1].(*Domain.ErrorResponse)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepository)(nil).CreateUser), ctx, user)
}

// GetUserEmail mocks base method.
func (m *MockUserRepository) GetUserEmail(ctx context.Context, email string) (*Domain.User, *Domain.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserEmail", ctx, email)
	ret0, _ := ret[0].(*Domain.User)
	ret1, _ := ret[1].(*Domain.ErrorResponse)
	return ret0, ret1
}

// GetUserEmail indicates an expected call of GetUserEmail.
func (mr *MockUserRepositoryMockRecorder) GetUserEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserEmail", reflect.TypeOf((*MockUserRepository)(nil).GetUserEmail), ctx, email)
}

// GetUserID mocks base method.
func (m *MockUserRepository) GetUserID(ctx context.Context, id string) (Domain.UserDTO, *Domain.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserID", ctx, id)
	ret0, _ := ret[0].(Domain.UserDTO)
	ret1, _ := ret[1].(*Domain.ErrorResponse)
	return ret0, ret1
}

// GetUserID indicates an expected call of GetUserID.
func (mr *MockUserRepositoryMockRecorder) GetUserID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserID", reflect.TypeOf((*MockUserRepository)(nil).GetUserID), ctx, id)
}

// PromoteUser mocks base method.
func (m *MockUserRepository) PromoteUser(ctx context.Context, id string) *Domain.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromoteUser", ctx, id)
	ret0, _ := ret[0].(*Domain.ErrorResponse)
	return ret0
}

// PromoteUser indicates an expected call of PromoteUser.
func (mr *MockUserRepositoryMockRecorder) PromoteUser(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromoteUser", reflect.TypeOf((*MockUserRepository)(nil).PromoteUser), ctx, id)
}
