// Code generated by MockGen. DO NOT EDIT.
// Source: Domain/sign_up.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/solo21-12/A2SV_back_end_track/tree/main/task_seven/Domain"
)

// MockSignUpUseCase is a mock of SignUpUseCase interface.
type MockSignUpUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockSignUpUseCaseMockRecorder
}

// MockSignUpUseCaseMockRecorder is the mock recorder for MockSignUpUseCase.
type MockSignUpUseCaseMockRecorder struct {
	mock *MockSignUpUseCase
}

// NewMockSignUpUseCase creates a new mock instance.
func NewMockSignUpUseCase(ctrl *gomock.Controller) *MockSignUpUseCase {
	mock := &MockSignUpUseCase{ctrl: ctrl}
	mock.recorder = &MockSignUpUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignUpUseCase) EXPECT() *MockSignUpUseCaseMockRecorder {
	return m.recorder
}

// CreateAccessToken mocks base method.
func (m *MockSignUpUseCase) CreateAccessToken(user domain.UserDTO, secret []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessToken", user, secret)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessToken indicates an expected call of CreateAccessToken.
func (mr *MockSignUpUseCaseMockRecorder) CreateAccessToken(user, secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessToken", reflect.TypeOf((*MockSignUpUseCase)(nil).CreateAccessToken), user, secret)
}

// CreateUser mocks base method.
func (m *MockSignUpUseCase) CreateUser(ctx context.Context, user domain.UserCreateRequest) (domain.UserDTO, *domain.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(domain.UserDTO)
	ret1, _ := ret[1].(*domain.ErrorResponse)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockSignUpUseCaseMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockSignUpUseCase)(nil).CreateUser), ctx, user)
}

// EncryptPassword mocks base method.
func (m *MockSignUpUseCase) EncryptPassword(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncryptPassword", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncryptPassword indicates an expected call of EncryptPassword.
func (mr *MockSignUpUseCaseMockRecorder) EncryptPassword(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptPassword", reflect.TypeOf((*MockSignUpUseCase)(nil).EncryptPassword), password)
}

// GetJwtSecret mocks base method.
func (m *MockSignUpUseCase) GetJwtSecret() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJwtSecret")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJwtSecret indicates an expected call of GetJwtSecret.
func (mr *MockSignUpUseCaseMockRecorder) GetJwtSecret() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJwtSecret", reflect.TypeOf((*MockSignUpUseCase)(nil).GetJwtSecret))
}
